'use strict';

var app = angular.module('Meaniscule', ['ui.router', 'firebase', 'hmTouchEvents']);

app.config(function ($urlRouterProvider, $locationProvider) {
   // This turns off hashbang urls (/#about) and changes it to something normal (/about)
   $locationProvider.html5Mode(true);
   // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
   $urlRouterProvider.otherwise('/');
});
'use strict';

app.controller('HomeController', function ($scope, $http, $firebaseArray) {
  var socket = io();

  function initiate() {
    console.log('initiated!');
    paper.install(window);
    paper.setup('myCanvas');
  };

  initiate();

  var tool = new Tool();
  // var drawingRef = new Firebase("https://whereyourdrawinggetslost.firebaseio.com");
  // var drawing = $firebaseArray(drawingRef);

  var moon = new Path.Circle({
    position: view.center,
    radius: 30,
    fillColor: 'yellow'
  });

  moon.removeSegment(2);
  moon.smooth();
  moon.rotate(-30);

  var center = new Point(50, 50);
  var points = 5;
  var radius1 = 5;
  var radius2 = 10;
  var star = new Path.Star(center, points, radius1, radius2);

  // star.fillColor = 'yellow';
  star.style = {
    fillColor: 'yellow',
    opacity: 0.7
  };

  var starArr = [];
  for (var i = 0; i < 150; i++) {
    var starCopy = star.clone();
    var randomPosition = Point.random();
    randomPosition.x = randomPosition.x * view.size._width;
    randomPosition.y = randomPosition.y * view.size._height;
    starCopy.position = randomPosition;
    starCopy.rotate(Math.random() * 360);
    starCopy.scale(0.25 + Math.random() * 0.75);
    starArr.push(starCopy);
  }

  star.remove();

  view.onFrame = function (event) {
    for (var i = 0; i < starArr.length; i++) {
      starArr[i].fillColor.hue += (1 - Math.round(Math.random()) * 2) * (Math.random() * 4);
      starArr[i].rotate(Math.random());
    }
  };

  socket.emit('sendtheNight', project);

  socket.on('gotIt', function (data) {
    console.log('yay', data);
  });
});
"use strict";

app.factory("DrawingFactory", function ($http) {
  return {
    loadCanvas: function loadCanvas() {
      return $http.get("/").then(function (response) {
        return response.data;
      });
    }
  };
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/app/home/home.html',
        controller: 'HomeController'
    });
});
"use strict";

app.directive("navbar", function () {
	return {
		restrict: "E",
		templateUrl: "/app/navbar/navbar.html"
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImhvbWUvaG9tZS5jb250cm9sbGVyLmpzIiwiaG9tZS9ob21lLmZhY3RvcnkuanMiLCJob21lL2hvbWUuc3RhdGUuanMiLCJuYXZiYXIvbmF2YmFyLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDOztBQUVuRixHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUU7O0FBRXpELG9CQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFbEMscUJBQWtCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3BDLENBQUMsQ0FBQzs7O0FDUEgsR0FBRyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFTLE1BQU0sRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFO0FBQ3ZFLE1BQUksTUFBTSxHQUFHLEVBQUUsRUFBRSxDQUFDOztBQUVsQixXQUFTLFFBQVEsR0FBSTtBQUNuQixXQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFCLFNBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEIsU0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUN6QixDQUFDOztBQUVGLFVBQVEsRUFBRSxDQUFDOztBQUVYLE1BQUksSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7Ozs7QUFJdEIsTUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3pCLFlBQVEsRUFBRSxJQUFJLENBQUMsTUFBTTtBQUNyQixVQUFNLEVBQUUsRUFBRTtBQUNWLGFBQVMsRUFBRSxRQUFRO0dBQ3BCLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsYUFBYSxD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QUNKO0dBQ0YsQ0FBQTtDQUNGLENBQUMsQ0FBQzs7O0FDVEgsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLGNBQWMsRUFBRTtBQUNqQyxrQkFBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDekIsV0FBRyxFQUFFLEdBQUc7QUFDUixtQkFBVyxFQUFFLHFCQUFxQjtBQUNsQyxrQkFBVSxFQUFFLGdCQUFnQjtLQUMvQixDQUFDLENBQUM7Q0FDTixDQUFDLENBQUM7OztBQ05ILEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLFlBQVU7QUFDakMsUUFBTztBQUNOLFVBQVEsRUFBRSxHQUFHO0FBQ2IsYUFBVyxFQUFFLHlCQUF5QjtFQUN0QyxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ01lYW5pc2N1bGUnLCBbJ3VpLnJvdXRlcicsICdmaXJlYmFzZScsICdobVRvdWNoRXZlbnRzJ10pO1xuXG5hcHAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAvLyBUaGlzIHR1cm5zIG9mZiBoYXNoYmFuZyB1cmxzICgvI2Fib3V0KSBhbmQgY2hhbmdlcyBpdCB0byBzb21ldGhpbmcgbm9ybWFsICgvYWJvdXQpXG4gICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG4gICAvLyBJZiB3ZSBnbyB0byBhIFVSTCB0aGF0IHVpLXJvdXRlciBkb2Vzbid0IGhhdmUgcmVnaXN0ZXJlZCwgZ28gdG8gdGhlIFwiL1wiIHVybC5cbiAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcbn0pOyIsImFwcC5jb250cm9sbGVyKCdIb21lQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRmaXJlYmFzZUFycmF5KSB7XG4gIHZhciBzb2NrZXQgPSBpbygpO1xuXG4gIGZ1bmN0aW9uIGluaXRpYXRlICgpIHsgXG4gICAgY29uc29sZS5sb2coJ2luaXRpYXRlZCEnKTtcbiAgICBwYXBlci5pbnN0YWxsKHdpbmRvdyk7XG4gICAgcGFwZXIuc2V0dXAoXCJteUNhbnZhc1wiKTtcbiAgfTtcblxuICBpbml0aWF0ZSgpO1xuXG4gIHZhciB0b29sID0gbmV3IFRvb2woKTtcbiAgLy8gdmFyIGRyYXdpbmdSZWYgPSBuZXcgRmlyZWJhc2UoXCJodHRwczovL3doZXJleW91cmRyYXdpbmdnZXRzbG9zdC5maXJlYmFzZWlvLmNvbVwiKTtcbiAgLy8gdmFyIGRyYXdpbmcgPSAkZmlyZWJhc2VBcnJheShkcmF3aW5nUmVmKTtcblxuICB2YXIgbW9vbiA9IG5ldyBQYXRoLkNpcmNsZSh7XG4gICAgcG9zaXRpb246IHZpZXcuY2VudGVyLFxuICAgIHJhZGl1czogMzAsXG4gICAgZmlsbENvbG9yOiAneWVsbG93JyxcbiAgfSk7XG5cbiAgbW9vbi5yZW1vdmVTZWdtZW50KDIpO1xuICBtb29uLnNtb290aCgpO1xuICBtb29uLnJvdGF0ZSgtMzApO1xuXG5cbiAgdmFyIGNlbnRlciA9IG5ldyBQb2ludCg1MCwgNTApO1xuICB2YXIgcG9pbnRzID0gNTtcbiAgdmFyIHJhZGl1czEgPSA1O1xuICB2YXIgcmFkaXVzMiA9IDEwO1xuICB2YXIgc3RhciA9IG5ldyBQYXRoLlN0YXIoY2VudGVyLCBwb2ludHMsIHJhZGl1czEsIHJhZGl1czIpO1xuICBcbiAgLy8gc3Rhci5maWxsQ29sb3IgPSAneWVsbG93JztcbiAgc3Rhci5zdHlsZSA9IHtcbiAgICBmaWxsQ29sb3I6ICd5ZWxsb3cnLFxuICAgIG9wYWNpdHk6IDAuN1xuICB9XG5cbiAgdmFyIHN0YXJBcnIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNTA7IGkrKykge1xuICAgIHZhciBzdGFyQ29weSA9IHN0YXIuY2xvbmUoKTtcbiAgICB2YXIgcmFuZG9tUG9zaXRpb24gPSBQb2ludC5yYW5kb20oKTtcbiAgICByYW5kb21Qb3NpdGlvbi54ID0gcmFuZG9tUG9zaXRpb24ueCAqIHZpZXcuc2l6ZS5fd2lkdGg7XG4gICAgcmFuZG9tUG9zaXRpb24ueSA9IHJhbmRvbVBvc2l0aW9uLnkgKiB2aWV3LnNpemUuX2hlaWdodDtcbiAgICBzdGFyQ29weS5wb3NpdGlvbiA9IHJhbmRvbVBvc2l0aW9uO1xuICAgIHN0YXJDb3B5LnJvdGF0ZShNYXRoLnJhbmRvbSgpICogMzYwKTtcbiAgICBzdGFyQ29weS5zY2FsZSgwLjI1ICsgTWF0aC5yYW5kb20oKSAqIDAuNzUpO1xuICAgIHN0YXJBcnIucHVzaChzdGFyQ29weSk7XG4gIH1cblxuICBzdGFyLnJlbW92ZSgpO1xuXG4gIHZpZXcub25GcmFtZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzdGFyQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdGFyQXJyW2ldLmZpbGxDb2xvci5odWUgKz0gICgxIC0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKSAqIDIpICogKE1hdGgucmFuZG9tKCkgKiA0KTtcbiAgICAgIHN0YXJBcnJbaV0ucm90YXRlKE1hdGgucmFuZG9tKCkpO1xuICAgIH1cbiAgfVxuXG4gIHNvY2tldC5lbWl0KCdzZW5kdGhlTmlnaHQnLCBwcm9qZWN0KTtcblxuICBzb2NrZXQub24oJ2dvdEl0JywgZnVuY3Rpb24oZGF0YSkge1xuICAgIGNvbnNvbGUubG9nKCd5YXknLCBkYXRhKTtcbiAgfSlcblxufSk7IiwiYXBwLmZhY3RvcnkoJ0RyYXdpbmdGYWN0b3J5JywgZnVuY3Rpb24gKCRodHRwKSB7XG4gIHJldHVybiB7XG4gICAgbG9hZENhbnZhczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRodHRwLmdldChcIi9cIilcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSk7IiwiYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnaG9tZScsIHtcbiAgICAgICAgdXJsOiAnLycsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9ob21lL2hvbWUuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ29udHJvbGxlcidcbiAgICB9KTtcbn0pOyIsImFwcC5kaXJlY3RpdmUoXCJuYXZiYXJcIiwgZnVuY3Rpb24oKXtcblx0cmV0dXJuIHtcblx0XHRyZXN0cmljdDogXCJFXCIsXG5cdFx0dGVtcGxhdGVVcmw6IFwiL2FwcC9uYXZiYXIvbmF2YmFyLmh0bWxcIlxuXHR9O1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9